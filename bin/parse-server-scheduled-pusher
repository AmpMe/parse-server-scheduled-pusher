#!/usr/bin/env node
const EventEmitter = require('events');

const Parse = require('parse/node');
const { runCampaigns, sendScheduledPushes } = require('../src');
const { logger } = require('../src/util');

const appId = process.env.PARSE_APPLICATION_ID;
Parse.initialize(
  appId,
  process.env.PARSE_JAVASCRIPT_KEY,
  process.env.PARSE_MASTER_KEY
);
Parse.serverURL = process.env.PARSE_URL;

if (typeof process.env.PARSE_MESSAGE_QUEUE_ADAPTER !== 'string') {
  throw new Error('PARSE_MESSAGE_QUEUE_ADAPTER must be defined');
}

logger.debug({ messageQueueAdapter: process.env.PARSE_MESSAGE_QUEUE_ADAPTER });
const messageQueueAdapter = require(process.env.PARSE_MESSAGE_QUEUE_ADAPTER);
if (typeof messageQueueAdapter.createPublisher !== 'function') {
  throw new Error('Invalid adapter');
}

const channel = process.env.PARSE_PUSH_CHANNEL;
logger.debug({ channel });
if (typeof channel !== 'string') {
  throw new Error('Invalid channel');
}

const publisher = messageQueueAdapter.createPublisher();
logger.debug('Created MQ publisher');

function run(emitter = new EventEmitter()) {
  sendScheduledPushes(publisher, channel, appId)
    .then((pushWorkItems) => {
      emitter.emit('sent-scheduled-pushes', { pushWorkItems });
      logger.debug('Finished sending scheduled pushes', { pushWorkItems });
    })
    .catch((err) => {
      logger.error(err.message, { stack: err.stack, name: err.name });
    });

  runCampaigns()
    .then((pushStatuses) => {
      emitter.emit('scheduled-push-campaigns', { pushStatuses });
      logger.debug('Finished scheduling push campaigns');
    })
    .catch((err) => {
      logger.error(err.message, { stack: err.stack, name: err.name });
    });

  return emitter;
}

if (!module.parent) { // MAIN
  run();
}

module.exports = { run };
